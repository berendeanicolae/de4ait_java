
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 09 11:26:49 EET 2016
//----------------------------------------------------

package frontend.parser;

import intermediate.ICode;
import intermediate.ICodeNode;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 09 11:26:49 EET 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\004\005\000\002\023\004" +
    "\000\002\023\006\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\011\003\000\002\012\003\000\002\012" +
    "\007\000\002\013\003\000\002\013\005\000\002\013\005" +
    "\000\002\014\003\000\002\014\005\000\002\015\003\000" +
    "\002\015\005\000\002\016\003\000\002\016\005\000\002" +
    "\016\005\000\002\017\003\000\002\017\005\000\002\017" +
    "\005\000\002\020\003\000\002\020\004\000\002\020\004" +
    "\000\002\021\003\000\002\021\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\005\000\002\024\006\000\002\024\005\000\002\025" +
    "\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\004\033\007\001\002\000\006\002\000\033" +
    "\000\001\002\000\020\004\022\005\015\006\021\007\014" +
    "\010\016\017\017\037\020\001\002\000\006\002\ufffe\033" +
    "\ufffe\001\002\000\004\045\013\001\002\000\006\002\012" +
    "\033\007\001\002\000\006\002\uffff\033\uffff\001\002\000" +
    "\004\002\001\001\002\000\054\002\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\016\ufffc\017\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\036\ufffc\037\ufffc\040\ufffc\001\002\000" +
    "\022\011\ufff6\012\ufff6\030\ufff6\033\ufff6\035\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\001\002\000\022\011\ufff8\012\ufff8\030" +
    "\ufff8\033\ufff8\035\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002" +
    "\000\022\011\ufff5\012\ufff5\030\ufff5\033\ufff5\035\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\001\002\000\022\011\ufffa\012\ufffa" +
    "\030\ufffa\033\ufffa\035\ufffa\045\ufffa\046\ufffa\047\ufffa\001" +
    "\002\000\022\011\026\012\024\030\031\033\007\035\033" +
    "\045\032\046\042\047\025\001\002\000\022\011\ufff7\012" +
    "\ufff7\030\ufff7\033\ufff7\035\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\001\002\000\022\011\ufff9\012\ufff9\030\ufff9\033\ufff9\035" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\001\002\000\022\011\026" +
    "\012\024\030\031\033\007\035\033\045\032\046\042\047" +
    "\025\001\002\000\022\011\026\012\024\030\031\033\007" +
    "\035\033\045\032\046\042\047\025\001\002\000\036\002" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\026\uffdc" +
    "\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\040" +
    "\uffdc\001\002\000\022\011\026\012\024\030\031\033\007" +
    "\035\033\045\032\046\042\047\025\001\002\000\024\002" +
    "\ufff3\026\075\027\076\031\077\032\ufff3\033\ufff3\034\ufff3" +
    "\036\ufff3\040\ufff3\001\002\000\036\002\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\016\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\036\uffe1\040\uffe1\001\002\000" +
    "\016\030\031\033\007\035\033\045\032\046\042\047\025" +
    "\001\002\000\004\035\065\001\002\000\022\011\026\012" +
    "\024\030\031\033\007\035\033\045\032\046\042\047\025" +
    "\001\002\000\014\002\ufff4\033\ufff4\034\ufff4\036\ufff4\040" +
    "\ufff4\001\002\000\036\002\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\036\uffe7\040\uffe7\001\002\000\024\002\ufff1" +
    "\026\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\036" +
    "\ufff1\040\ufff1\001\002\000\040\002\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\026\uffdf\027\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\036\uffdf\037\020\040\uffdf\001\002" +
    "\000\036\002\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016" +
    "\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\036\uffe4\040\uffe4\001\002\000\036\002\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\016\uffde\026\uffde\027\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\036\uffde\040\uffde\001\002\000" +
    "\036\002\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd" +
    "\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\040\uffdd\001\002\000\032\002\uffec\011\051\012\052" +
    "\016\uffec\026\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\036\uffec\040\uffec\001\002\000\036\002\uffea\011\uffea" +
    "\012\uffea\013\054\014\055\016\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\036\uffea\040\uffea\001\002" +
    "\000\026\002\uffee\016\047\026\uffee\027\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\036\uffee\040\uffee\001\002\000\006" +
    "\002\ufffd\033\ufffd\001\002\000\022\011\026\012\024\030" +
    "\031\033\007\035\033\045\032\046\042\047\025\001\002" +
    "\000\032\002\uffeb\011\051\012\052\016\uffeb\026\uffeb\027" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\040\uffeb" +
    "\001\002\000\022\011\026\012\024\030\031\033\007\035" +
    "\033\045\032\046\042\047\025\001\002\000\022\011\026" +
    "\012\024\030\031\033\007\035\033\045\032\046\042\047" +
    "\025\001\002\000\036\002\uffe8\011\uffe8\012\uffe8\013\054" +
    "\014\055\016\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\036\uffe8\040\uffe8\001\002\000\022\011\026" +
    "\012\024\030\031\033\007\035\033\045\032\046\042\047" +
    "\025\001\002\000\022\011\026\012\024\030\031\033\007" +
    "\035\033\045\032\046\042\047\025\001\002\000\036\002" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\026\uffe5" +
    "\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5\040" +
    "\uffe5\001\002\000\036\002\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\036\uffe6\040\uffe6\001\002\000\036\002\uffe9" +
    "\011\uffe9\012\uffe9\013\054\014\055\016\uffe9\026\uffe9\027" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\040\uffe9" +
    "\001\002\000\022\011\026\012\024\030\031\033\007\035" +
    "\033\045\032\046\042\047\025\001\002\000\026\002\uffed" +
    "\016\047\026\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\036\uffed\040\uffed\001\002\000\004\036\064\001\002" +
    "\000\036\002\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016" +
    "\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\036\uffdb\040\uffdb\001\002\000\024\011\026\012\024\030" +
    "\031\033\007\035\033\036\066\045\032\046\042\047\025" +
    "\001\002\000\036\002\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\016\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\040\uffd9\001\002\000\006\034\071\036" +
    "\072\001\002\000\006\034\uffd8\036\uffd8\001\002\000\022" +
    "\011\026\012\024\030\031\033\007\035\033\045\032\046" +
    "\042\047\025\001\002\000\036\002\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\016\uffda\026\uffda\027\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\036\uffda\040\uffda\001\002\000\006" +
    "\034\uffd7\036\uffd7\001\002\000\036\002\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\016\uffe0\026\uffe0\027\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\036\uffe0\040\uffe0\001\002\000" +
    "\022\011\026\012\024\030\031\033\007\035\033\045\032" +
    "\046\042\047\025\001\002\000\022\011\026\012\024\030" +
    "\031\033\007\035\033\045\032\046\042\047\025\001\002" +
    "\000\022\011\026\012\024\030\031\033\007\035\033\045" +
    "\032\046\042\047\025\001\002\000\004\032\101\001\002" +
    "\000\022\011\026\012\024\030\031\033\007\035\033\045" +
    "\032\046\042\047\025\001\002\000\016\002\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\040\ufff2\001\002\000\024\002" +
    "\uffef\026\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\036\uffef\040\uffef\001\002\000\024\002\ufff0\026\ufff0\027" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\040\ufff0" +
    "\001\002\000\036\002\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\036\uffe3\040\uffe3\001\002\000\036\002\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\026\uffe2\027\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\040\uffe2\001" +
    "\002\000\004\040\110\001\002\000\054\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\016\ufffb\017\ufffb\026\ufffb\027\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\036\ufffb\037\ufffb\040\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\012\002\007\003\003\004\005\023\004\001" +
    "\001\000\002\001\001\000\004\026\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\010\004\005\023" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\106\012\033\013\026" +
    "\014\035\015\044\016\042\017\043\020\034\021\037\022" +
    "\027\023\036\024\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\011\045\012\033\013\026\014\035\015" +
    "\044\016\042\017\043\020\034\021\037\022\027\023\036" +
    "\024\040\001\001\000\014\020\105\021\037\022\027\023" +
    "\036\024\040\001\001\000\002\001\001\000\014\020\104" +
    "\021\037\022\027\023\036\024\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\073\022\027\023\036" +
    "\024\040\001\001\000\002\001\001\000\032\011\062\012" +
    "\033\013\026\014\035\015\044\016\042\017\043\020\034" +
    "\021\037\022\027\023\036\024\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\047\017\043\020\034\021" +
    "\037\022\027\023\036\024\040\001\001\000\002\001\001" +
    "\000\016\017\057\020\034\021\037\022\027\023\036\024" +
    "\040\001\001\000\016\017\052\020\034\021\037\022\027" +
    "\023\036\024\040\001\001\000\002\001\001\000\014\020" +
    "\056\021\037\022\027\023\036\024\040\001\001\000\014" +
    "\020\055\021\037\022\027\023\036\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\061\016\042\017\043\020\034\021\037\022\027\023" +
    "\036\024\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\067\012\033\013\026\014" +
    "\035\015\044\016\042\017\043\020\034\021\037\022\027" +
    "\023\036\024\040\025\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\011\072\012\033" +
    "\013\026\014\035\015\044\016\042\017\043\020\034\021" +
    "\037\022\027\023\036\024\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\103\015" +
    "\044\016\042\017\043\020\034\021\037\022\027\023\036" +
    "\024\040\001\001\000\024\014\102\015\044\016\042\017" +
    "\043\020\034\021\037\022\027\023\036\024\040\001\001" +
    "\000\030\012\077\013\026\014\035\015\044\016\042\017" +
    "\043\020\034\021\037\022\027\023\036\024\040\001\001" +
    "\000\002\001\001\000\030\012\101\013\026\014\035\015" +
    "\044\016\042\017\043\020\034\021\037\022\027\023\036" +
    "\024\040\001\001\000\002\001\001\000\004\027\060\001" +
    "\001\000\004\027\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected ICode root;

    public void setRoot(ICode node) { root = node; }
    public ICode getRoot() { return root; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Params ::= Params COMMA Expression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Params ::= Expression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Params",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunctionDesignator ::= IDENTIFIER LPAREN RPAREN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDesignator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionDesignator ::= IDENTIFIER LPAREN Params RPAREN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDesignator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Primary ::= LPAREN Expression RPAREN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Primary ::= STRING_LIT 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Primary ::= INT_LIT 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Primary ::= FunctionDesignator 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Primary ::= VarAccess 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NegationExpression ::= NOT NegationExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NegationExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NegationExpression ::= Primary 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NegationExpression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SignExpression ::= SUB_OP SignExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SignExpression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SignExpression ::= ADD_OP SignExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SignExpression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SignExpression ::= NegationExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SignExpression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MultiplicativeExpression ::= MultiplicativeExpression DIV_OP SignExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MultiplicativeExpression ::= MultiplicativeExpression MUL_OP SignExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MultiplicativeExpression ::= SignExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AdditiveExpression ::= AdditiveExpression SUB_OP MultiplicativeExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AdditiveExpression ::= AdditiveExpression ADD_OP MultiplicativeExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AdditiveExpression ::= MultiplicativeExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConcatenationExpression ::= ConcatenationExpression AND_OP AdditiveExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConcatenationExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConcatenationExpression ::= AdditiveExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConcatenationExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RelationalExpression ::= RelationalExpression ComparisonOperator ConcatenationExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RelationalExpression ::= ConcatenationExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LogicalExpression ::= LogicalExpression OR RelationalExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LogicalExpression ::= LogicalExpression AND RelationalExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LogicalExpression ::= RelationalExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConditionalExpression ::= LogicalExpression COND ConditionalExpression COLON ConditionalExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConditionalExpression ::= LogicalExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression ::= ConditionalExpression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AssignmentOperator ::= AND_ASSIGN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AssignmentOperator ::= DIV_ASSIGN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AssignmentOperator ::= MUL_ASSIGN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AssignmentOperator ::= SUB_ASSIGN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AssignmentOperator ::= ADD_ASSIGN 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AssignmentOperator ::= EQ_OP 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarAccess ::= VarAccess LBRAC Expression RBRAC 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarAccess",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarAccess ::= DOLLAR IDENTIFIER 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarAccess",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // AssignmentStatement ::= VarAccess AssignmentOperator Expression 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= AssignmentStatement 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= StatementList Statement 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // StatementList ::= Statement 
            {
              ICodeNode RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= StatementList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ICodeNode start_val = (ICodeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

