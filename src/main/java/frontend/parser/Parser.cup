package frontend.parser;

import intermediate.ICode;
import intermediate.ICodeNode;

parser code {:
    protected ICode root;

    public void setRoot(ICode node) { root = node; }
    public ICode getRoot() { return root; }
:};

terminal ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, AND_ASSIGN;
terminal ADD_OP, SUB_OP, MUL_OP, DIV_OP, POW_OP, AND_OP;
terminal EQ_OP, EQEQ_OP, NE_OP, GT_OP, GE_OP, LT_OP, LE_OP;
terminal AND, OR, NOT;
terminal COND, COLON, DOLLAR, COMMA;
terminal LPAREN, RPAREN, LBRAC, RBRAC;
terminal IF, THEN, ELSE, ELSEIF, ENDIF, WHILE, WEND, FOR;
terminal String IDENTIFIER;
terminal Integer INT_LIT;
terminal String STRING_LIT;

nonterminal ICodeNode StatementList, Statement;
nonterminal ICodeNode AssignmentStatement, IfStatement, IfStatementWithElse, WhileStatement, ForStatement, DoWhileStatement;
nonterminal ICodeNode Expression, ConditionalExpression, LogicalExpression, RelationalExpression, ConcatenationExpression;
nonterminal ICodeNode AdditiveExpression, MultiplicativeExpression, SignExpression, NegationExpression, Primary;
nonterminal ICodeNode VarAccess, FunctionDesignator, Params;
nonterminal ICodeNode AssignmentOperator, ComparisonOperator;

start with StatementList;

StatementList
    ::= Statement
        {:
        :}
    |
        StatementList Statement
        {:
        :}
    ;

Statement
    ::= AssignmentStatement
        {:
        :}
    ;

AssignmentStatement
    ::= VarAccess AssignmentOperator Expression
        {:
        :}
    ;

VarAccess
    ::= DOLLAR IDENTIFIER
        {:
        :}
    |
        VarAccess LBRAC Expression RBRAC
        {:
        :}
    ;

AssignmentOperator
    ::= EQ_OP
        {:
        :}
    |
        ADD_ASSIGN
        {:
        :}
    |
        SUB_ASSIGN
        {:
        :}
    |
        MUL_ASSIGN
        {:
        :}
    |
        DIV_ASSIGN
        {:
        :}
    |
        AND_ASSIGN
        {:
        :}
    ;

Expression
    ::= ConditionalExpression
        {:
        :}
    ;

ConditionalExpression
    ::= LogicalExpression
        {:
        :}
    |
        LogicalExpression COND ConditionalExpression COLON ConditionalExpression
        {:
        :}
    ;

LogicalExpression
    ::= RelationalExpression
        {:
        :}
    |
        LogicalExpression AND RelationalExpression
        {:
        :}
    |
        LogicalExpression OR RelationalExpression
        {:
        :}
    ;

RelationalExpression
    ::= ConcatenationExpression
        {:
        :}
    |
        RelationalExpression ComparisonOperator ConcatenationExpression
        {:
        :}
    ;

ConcatenationExpression
    ::= AdditiveExpression
        {:
        :}
    |
        ConcatenationExpression AND_OP AdditiveExpression
        {:
        :}
    ;

AdditiveExpression
    ::= MultiplicativeExpression
        {:
        :}
    |
        AdditiveExpression ADD_OP MultiplicativeExpression
        {:
        :}
    |
        AdditiveExpression SUB_OP MultiplicativeExpression
        {:
        :}
    ;

MultiplicativeExpression
    ::= SignExpression
        {:
        :}
    |
        MultiplicativeExpression MUL_OP SignExpression
        {:
        :}
    |
        MultiplicativeExpression DIV_OP SignExpression
        {:
        :}
    ;

SignExpression
    ::= NegationExpression
        {:
        :}
    |
        ADD_OP SignExpression
        {:
        :}
    |
        SUB_OP SignExpression
        {:
        :}
    ;

NegationExpression
    ::= Primary
        {:
        :}
    |
        NOT NegationExpression
        {:
        :}
    ;

Primary
    ::= VarAccess
        {:
        :}
    |
        FunctionDesignator
        {:
        :}
    |
        INT_LIT
        {:
        :}
    |
        STRING_LIT
        {:
        :}
    |
        LPAREN Expression RPAREN
        {:
        :}
    ;

FunctionDesignator
    ::= IDENTIFIER LPAREN Params RPAREN
        {:
        :}
    |
        IDENTIFIER LPAREN RPAREN
        {:
        :}
    ;

Params
    ::= Expression
        {:
        :}
    |
        Params COMMA Expression
        {:
        :}
    ;

WhileStatement
    ::= WHILE Expression StatementList WEND
        {:
        :}
    ;

IfStatement
    ::= IfStatementWithoutElse ENDIF
        {:
        :}
    |
        IfStatementWithoutElse ELSE StatementList ENDIF
        {:
        :}
    ;

IfStatementWithoutElse
    ::= IF Expression THEN StatementList
        {:
        :}
    |
        IfStatementWithoutElse ELSEIF Expression THEN StatementList ENDIF
        {:
        :}
    ;
